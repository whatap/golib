// Code generated by mockery v2.14.0. DO NOT EDIT.

package config

import mock "github.com/stretchr/testify/mock"

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

// ApplyDefault provides a mock function with given fields:
func (_m *MockConfig) ApplyDefault() {
	_m.Called()
}

// GetBoolean provides a mock function with given fields: key, def
func (_m *MockConfig) GetBoolean(key string, def bool) bool {
	ret := _m.Called(key, def)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, bool) bool); ok {
		r0 = rf(key, def)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetFloat provides a mock function with given fields: key, def
func (_m *MockConfig) GetFloat(key string, def float32) float32 {
	ret := _m.Called(key, def)

	var r0 float32
	if rf, ok := ret.Get(0).(func(string, float32) float32); ok {
		r0 = rf(key, def)
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// GetInt provides a mock function with given fields: key, def
func (_m *MockConfig) GetInt(key string, def int) int32 {
	ret := _m.Called(key, def)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string, int) int32); ok {
		r0 = rf(key, def)
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// GetIntSet provides a mock function with given fields: key, def, deli
func (_m *MockConfig) GetIntSet(key string, def string, deli string) []int32 {
	ret := _m.Called(key, def, deli)

	var r0 []int32
	if rf, ok := ret.Get(0).(func(string, string, string) []int32); ok {
		r0 = rf(key, def, deli)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	return r0
}

// GetLong provides a mock function with given fields: key, def
func (_m *MockConfig) GetLong(key string, def int64) int64 {
	ret := _m.Called(key, def)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(key, def)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetStringArray provides a mock function with given fields: key, def, deli
func (_m *MockConfig) GetStringArray(key string, def string, deli string) []string {
	ret := _m.Called(key, def, deli)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(key, def, deli)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetStringHashCodeSet provides a mock function with given fields: key, def, deli
func (_m *MockConfig) GetStringHashCodeSet(key string, def string, deli string) []int32 {
	ret := _m.Called(key, def, deli)

	var r0 []int32
	if rf, ok := ret.Get(0).(func(string, string, string) []int32); ok {
		r0 = rf(key, def, deli)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	return r0
}

// GetStringHashSet provides a mock function with given fields: key, def, deli
func (_m *MockConfig) GetStringHashSet(key string, def string, deli string) []int32 {
	ret := _m.Called(key, def, deli)

	var r0 []int32
	if rf, ok := ret.Get(0).(func(string, string, string) []int32); ok {
		r0 = rf(key, def, deli)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	return r0
}

// GetValue provides a mock function with given fields: key
func (_m *MockConfig) GetValue(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetValueDef provides a mock function with given fields: key, def
func (_m *MockConfig) GetValueDef(key string, def string) string {
	ret := _m.Called(key, def)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, def)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetValues provides a mock function with given fields: v
func (_m *MockConfig) SetValues(v *map[string]string) {
	_m.Called(v)
}

// String provides a mock function with given fields:
func (_m *MockConfig) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToString provides a mock function with given fields:
func (_m *MockConfig) ToString() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

func (_m *MockConfig) Destroy() {
}

func (_m *MockConfig) GetConfFile() string {
	return ""
}

func (_m *MockConfig) GetKeys() []string {
	return make([]string, 0)
}

type mockConstructorTestingTNewMockConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfig(t mockConstructorTestingTNewMockConfig) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
